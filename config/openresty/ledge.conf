lua_package_path '/sites/knownly/lua_modules/lua-resty-cookie/lib/?.lua;/sites/knownly/lua_modules/lua-resty-redis-connector/lib/?.lua;/sites/knownly/lua_modules/lua-resty-http/lib/?.lua;/sites/knownly/lua_modules/lua-resty-redis/lib/?.lua;/sites/knownly/lua_modules/lua-resty-qless/lib/?.lua;/sites/knownly/lua_modules/ledge/lib/?.lua;/sites/knownly/lua_modules/lua-ffi-zlib/lib/?.lua;/sites/knownly/lua_modules/lua-mimetypes/?.lua;;';

if_modified_since Off;
lua_check_client_abort Off;
resolver 8.8.8.8;

init_by_lua '
  local ledge_m = require "ledge.ledge"
  ledge = ledge_m.new()
  ledge:config_set("advertise_ledge", false)
  -- ledge:config_set("origin_mode", ledge.ORIGIN_MODE_AVOID)
  ledge:config_set("enable_collapsed_forwarding", false)
  ledge:config_set("redis_host", { host = "127.0.0.1", port = 6380 })
  ledge:config_set("upstream_host", "dl.dropboxusercontent.com")
  ledge:config_set("upstream_port", 443)
  ledge:config_set("upstream_use_ssl", true)
  ledge:config_set("upstream_ssl_verify", false)
  ledge:config_set("upstream_ssl_server_name", "dl.dropboxusercontent.com")
  ledge:config_set("cache_max_memory", 50128)
  ledge:config_set("upstream_connect_timeout", 1000)
  ledge:config_set("upstream_read_timeout", 5000)
  -- ledge:config_set("stale_if_error", 86400)
';

init_worker_by_lua 'ledge:run_workers()';

server {
    listen 8280;
    server_name ledge.knownly.net;

    access_log  /sites/knownly/logs/ledge.log sitelog;
    error_log  /sites/knownly/logs/ledge_error.log;

    location / {
        content_by_lua '
          ledge:config_set("cache_key_spec", { ngx.var.uri })
          -- local inspect = require "inspect"
          -- ledge:bind("origin_required", function() ngx.log(ngx.STDERR, "Origin required") end)
          ledge:bind("before_request", function(req_params)
             -- Update the host header with that of the upstream host and port
             req_params.headers["host"] = "dl.dropboxusercontent.com"
          end)
          -- ledge:bind("response_ready", function(res) ngx.log(ngx.STDERR, "Response ready event") end)
          -- ledge:bind("before_save", function(res)
          --   ngx.log(ngx.STDERR, "Saving to cache")
          -- end)
          ledge:bind("origin_fetched", function(res)
            -- Add some cache headers.  Ledge will assume they came from the origin.
            res.header["Cache-Control"] = "max-age=" .. 86400
            res.header["Last-Modified"] = ngx.http_time(ngx.time())
            res.header["Expires"] = ngx.http_time(ngx.time() + 86400)
          end)
          ledge:run()
        ';
    }
}
